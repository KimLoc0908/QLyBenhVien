@page "/admin/register"
@using KimLoc_DoAn.Models
@using Microsoft.EntityFrameworkCore
@inject QLyBenhVienContext DbContext
@inject NavigationManager Navigation
<div class="register-container">
    <h3>Admin Registration</h3>
    <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" Context="editFormContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
            <ValidationMessage For="@(() => confirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
    @if (registerFailed)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</div>
<style>
    body {
        background-color: #f4f4f9;
        font-family: Arial, sans-serif;
    }

    .register-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        background: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn {
        margin-top: 10px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .btn-block {
        display: block;
        width: 100%;
        margin-bottom: 15px;
    }

    .alert {
        margin-top: 20px;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    a {
        color: #007bff;
        text-decoration: none;
    }

        a:hover {
            text-decoration: underline;
        }
</style>
@code {
    private Admin registerModel = new Admin();
    private bool registerFailed = false;
    private string errorMessage = "";
    private string confirmPassword;
    private async Task HandleValidSubmit()
    {
        if (registerModel.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            registerFailed = true;
            return;
        }
        try
        {
            var existingAdmin = await DbContext.Admins.FirstOrDefaultAsync(a => a.Username == registerModel.Username);
            if (existingAdmin != null)
            {
                errorMessage = "Username already exists.";
                registerFailed = true;
                return;
            }
            DbContext.Admins.Add(registerModel);
            await DbContext.SaveChangesAsync();
            // Redirect to login page after successful registration
            Navigation.NavigateTo("/admin/login", true);
        }
        catch (DbUpdateException ex)
        {
            // Handle SQL errors
            errorMessage = "An error occurred while registering. Please try again.";
            registerFailed = true;
        }
        catch (Exception ex)
        {
            // Handle any other errors
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            registerFailed = true;
        }
    }
}