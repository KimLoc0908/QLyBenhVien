@page "/Khoa"
@using KimLoc_DoAn.Models
@inject QLyBenhVienContext DbContext
@attribute [Authorize]

<div class="container">
    <h4>Danh sách Khoa</h4>
    <div class="search-container">
        <input type="text" class="form-control search-input" placeholder="Tìm kiếm..." @bind="searchTerm" @oninput="SearchKhoa" />
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Tên Khoa</th>
                <th>Hành Động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var khoa in filteredKhoas)
            {
                <tr>
                    <td>@khoa.TenKhoa</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditKhoa(khoa)">Chỉnh Sửa</button>
                        <button class="btn btn-danger" @onclick="() => DeleteKhoa(khoa.Id)">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="form-container">
        <h4>@(isEditing ? "Chỉnh Sửa Khoa" : "Thêm Khoa")</h4>
        <EditForm Model="newKhoa" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="TenKhoa">Tên Khoa:</label>
                <InputText id="TenKhoa" class="form-control" @bind-Value="newKhoa.TenKhoa" />
                <ValidationMessage For="@(() => newKhoa.TenKhoa)" />
            </div>

            <button type="submit" class="btn btn-primary">@((isEditing ? "Cập Nhật" : "Thêm"))</button>
        </EditForm>
    </div>
</div>

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
    }

    .container {
        width: 80%;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    h4 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        margin-bottom: 20px;
        border-collapse: collapse;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .table th, .table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .table thead {
            background-color: #2980b9;
            color: #fff;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .search-container {
        margin-bottom: 20px;
        text-align: center;
    }

    .search-input {
        width: 100%;
        max-width: 1100px;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin: 0 auto; 
        display: block; 
    }

    .form-container {
        margin-top: 20px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        color: #2c3e50;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        font-weight: 600;
        color: #fff;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #3498db;
    }

    .btn-warning {
        background-color: #f39c12;
    }

    .btn-danger {
        background-color: #e74c3c;
    }

    .btn:hover {
        opacity: 0.8;
    }
</style>

@code {
    private List<Khoa> khoas = new List<Khoa>();
    private List<Khoa> filteredKhoas = new List<Khoa>();
    private Khoa newKhoa = new Khoa();
    private bool isEditing = false;
    private string searchTerm = string.Empty;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        khoas = DbContext.Khoas.ToList();
        FilterKhoas();
    }

    private void HandleValidSubmit()
    {
        if (isEditing)
        {
            DbContext.Khoas.Update(newKhoa);
        }
        else
        {
            DbContext.Khoas.Add(newKhoa);
        }

        DbContext.SaveChanges();
        LoadData();
        ResetForm();
    }

    private void EditKhoa(Khoa khoa)
    {
        newKhoa = khoa;
        isEditing = true;
    }

    private void DeleteKhoa(Guid id)
    {
        var khoaToDelete = DbContext.Khoas.Find(id);
        if (khoaToDelete != null)
        {
            DbContext.Khoas.Remove(khoaToDelete);
            DbContext.SaveChanges();
            LoadData();
        }
    }

    private void ResetForm()
    {
        newKhoa = new Khoa();
        isEditing = false;
    }

    private void SearchKhoa(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterKhoas();
    }

    private void FilterKhoas()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredKhoas = khoas;
        }
        else
        {
            filteredKhoas = khoas.Where(k => k.TenKhoa.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
